name: CI (DVC + pytest + CML)

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 471.0.0"

      # Decode your base64 service-account secret into a JSON file and export env
      - name: Auth to GCP from base64 JSON
        env:
          GCP_B64: ${{ secrets.GCP_CREDENTIALS_B64 }}
        run: |
          set -e
          KEY_FILE="${RUNNER_TEMP}/gcp-key.json"
          echo "$GCP_B64" | base64 -d > "$KEY_FILE"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$KEY_FILE" >> "$GITHUB_ENV"
          gcloud auth activate-service-account --key-file="$KEY_FILE"
          gcloud config set project hybrid-shine-474105-e1

      - name: Install CI deps
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-ci.txt ]; then
            pip install -r requirements-ci.txt
          else
            pip install pytest==7.4.4 pandas==2.2.2 numpy==1.26.4 scikit-learn==1.4.2 dvc==3.51.0 dvc-gs==3.0.1
          fi

      - name: DVC pull (use GCP key)
        run: |
          set -e
          dvc --version
          echo "Configured remotes:"
          dvc remote list || true
          # If your remote needs explicit credential file, try to set it (ignore if not supported)
          RMT=$(dvc remote list | awk '{print $1; exit}')
          if [ -n "$RMT" ]; then
            dvc remote modify "$RMT" credentialpath "$GOOGLE_APPLICATION_CREDENTIALS" || true
          fi
          dvc pull -v

      - name: Run pytest
        id: tests
        run: |
          set -e
          mkdir -p reports
          pytest -q --maxfail=1 --disable-warnings | tee reports/pytest.txt

      - name: Setup CML
        uses: iterative/setup-cml@v1

      - name: Comment report with CML
        if: always()
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # send the report *content* as the single positional arg
          BODY="$(cat report.md)"
          cml comment create --pr "$BODY"


      - name: Upload pytest log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-log
          path: reports/pytest.txt
          if-no-files-found: ignore
